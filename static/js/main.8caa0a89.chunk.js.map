{"version":3,"sources":["Overlay.js","App.js","reportWebVitals.js","index.js"],"names":["Overlay","details","setOverlay","filename","replace","name","split","className","src","alt","onClick","App","canvas","useRef","useState","overlay","useEffect","app","PIXI","width","window","innerWidth","height","innerHeight","view","current","viewport","Viewport","screenWidth","screenHeight","worldWidth","worldHeight","interaction","renderer","plugins","stage","addChild","drag","pinch","wheel","decelerate","positionDict","fetch","then","response","json","data","i","length","fileName","loader","add","load","resources","key","imageSprite","texture","clusterPos","cluster_pos","x","y","anchor","interactive","on","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEe,SAASA,EAAT,GAAwC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,WAEhCC,EAAWF,EAAQE,SAASC,QAAQ,gBAAiB,IACrDC,EAAOJ,EAAQE,SAASC,QAAQ,OAAO,IAAIE,MAAM,yBACvD,OACI,sBAAKC,UAAU,gBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,aAAaC,IAAK,iBAAmBL,EAAUM,IAAI,oBAClE,wBACIC,QAAS,WACLR,EAAW,OAFnB,kBAMJ,kDACA,mBAAGK,UAAU,OAAb,SAAqBF,OC+ElBM,MA1Ff,WACE,IAAMC,EAASC,iBAAO,MACtB,EAAgCC,mBAAS,MAAzC,mBAAQC,EAAR,KAAiBb,EAAjB,KAkEA,OAhEAc,qBAAU,WACR,IAAMC,EAAM,IAAIC,IAAiB,CAC/BC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,KAAMZ,EAAOa,UAGTC,EAAW,IAAIC,IAAS,CAC5BC,YAAaR,OAAOC,WACpBQ,aAAcT,OAAOG,YACrBO,WAAY,IACZC,YAAa,IACbC,YAAaf,EAAIgB,SAASC,QAAQF,cAKpCf,EAAIkB,MAAMC,SAASV,GAGnBA,EACGW,OACAC,QACAC,QACAC,aAEH,IAAIC,EAAe,GAEnBC,MAAM,8BACHC,MAAK,SAACC,GAAa,OAAOA,EAASC,UACnCF,MAAK,SAACG,GACL,IAAK,IAAIC,EAAE,EAAGA,EAAID,EAAKE,OAAQD,IAAI,CACjC,IAAME,EAAWH,EAAKC,GAAG5C,SAASC,QAAQ,MAAO,KAC3CC,EAAO4C,EAAS7C,QAAQ,OAAQ,IACtCa,EAAIiC,OAAOC,IAAI9C,EAAM,aAAe4C,GACpCH,EAAKC,GAAG1C,KAAOA,EACfoC,EAAapC,GAAQyC,EAAKC,GAE5B9B,EAAIiC,OAAOE,MAAK,SAACF,EAAQG,GAAa,IAAD,WAC1BC,GACP,IAAMC,EAAc,IAAIrC,IAAYmC,EAAUC,GAAKE,SAC7CC,EAAahB,EAAaa,GAAKI,YAErCH,EAAYI,EAAI,EAAI1C,EAAIgB,SAASd,OAAyB,EAAhBsC,EAAW,GAAS,GAC9DF,EAAYK,EAAI,EAAI3C,EAAIgB,SAASd,OAAyB,EAAhBsC,EAAW,GAAS,GAE9DF,EAAYM,OAAOF,EAAI,GACvBJ,EAAYM,OAAOD,EAAI,GAEvBL,EAAYO,aAAc,EAE1B,IAAMzD,EAAOiD,EAEbC,EAAYQ,GAAG,SAAS,WACtB7D,EAAWuC,EAAapC,OAG1BqB,EAASU,SAASmB,IAlBpB,IAAK,IAAID,KAAOD,EAAW,EAAlBC,WAuBf,IAGD,qBAAK/C,UAAU,MAAf,SACG,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sEACA,mBAAGA,UAAU,UAAb,mFAEF,wBAAQA,UAAU,SAASyD,IAAMpD,IACjC,sBAAKL,UAAU,UAAf,UACE,0CACA,4BAAKQ,EAAmD,GAAzC,yCACbA,GACA,cAACf,EAAD,CACAC,QAASc,EACTb,WAAYA,aC5ET+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8caa0a89.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nexport default function Overlay({details, setOverlay}){\n    // const filename = details.filename.replace('finished_1-7/', 'finished_1-7_');\n    const filename = details.filename.replace('finished_1-7/', \"\");\n    const name = details.filename.replace(\".png\",'').split('finished_1-7/example-');\n    return (\n        <div className=\"specContainer\">\n            <div className=\"specimen\">\n                <img className=\"largeThumb\" src={\"./resized-512/\" + filename} alt='large thumbnail'/>\n                <button \n                    onClick={() => {\n                        setOverlay(null);\n                    }}\n                >x</button>\n            </div>\n            <p>Truncation Index:</p>\n            <p className=\"name\">{name}</p>\n        </div>\n    );\n}","import './App.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Viewport } from 'pixi-viewport';\nimport * as PIXI from 'pixi.js';\nimport Overlay from './Overlay';\n\nfunction App() {\n  const canvas = useRef(null);\n  const [ overlay, setOverlay ] = useState(null);\n\n  useEffect(() => {\n    const app = new PIXI.Application({\n      width: window.innerWidth,\n      height: window.innerHeight,\n      view: canvas.current,\n    });\n\n    const viewport = new Viewport({\n      screenWidth: window.innerWidth,\n      screenHeight: window.innerHeight,\n      worldWidth: 1000, \n      worldHeight: 1000,\n      interaction: app.renderer.plugins.interaction\n    });\n\n    // app.stage.scale.x = .20;\n    // app.stage.scale.y = .20;\n    app.stage.addChild(viewport);\n\n\n    viewport  \n      .drag()\n      .pinch()\n      .wheel()\n      .decelerate()\n\n    let positionDict = {}\n\n    fetch('./image_umap_position.json')\n      .then((response)=> {return response.json()})\n      .then((data)=>{\n        for (let i=0; i < data.length; i++){\n          const fileName = data[i].filename.replace(/\\//g, '_');\n          const name = fileName.replace('.png', '');\n          app.loader.add(name, './resized/' + fileName);\n          data[i].name = name;\n          positionDict[name] = data[i];\n        }\n        app.loader.load((loader, resources)=>{\n          for (let key in resources){\n            const imageSprite = new PIXI.Sprite(resources[key].texture)\n            const clusterPos = positionDict[key].cluster_pos;\n\n            imageSprite.x = 5 * app.renderer.width * (clusterPos[0] * 2 - 1);\n            imageSprite.y = 5 * app.renderer.width * (clusterPos[1] * 2 - 1);\n\n            imageSprite.anchor.x = 0.5;\n            imageSprite.anchor.y = 0.5;\n\n            imageSprite.interactive = true;\n\n            const name = key;\n\n            imageSprite.on('click', () => {\n              setOverlay(positionDict[name]);\n            });\n\n            viewport.addChild(imageSprite)\n          }\n        });\n      });\n\n  },[])\n\n  return (\n   <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>Field Report from the Uncanny Valley</h1>\n          <p className=\"subHead\">Mapping the Effects PSI Truncation Using a StyleGAN Face Generator</p>\n        </div>\n        <canvas className=\"canvas\" ref={ canvas } />\n        <div className=\"results\">\n          <p>Specimen:</p>\n          <p>{!overlay ? '(Click on thumbnails to view larger)' : \"\"}</p>\n          { overlay && \n            <Overlay\n            details={overlay}\n            setOverlay={setOverlay}/>\n          }\n        </div>\n      </div>\n   </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}